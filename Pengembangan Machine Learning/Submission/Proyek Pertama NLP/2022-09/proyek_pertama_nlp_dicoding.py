# -*- coding: utf-8 -*-
"""Proyek Pertama NLP Dicoding.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uukrYR66I_8k0a59B5LhtQFwf5Jfgyrs

Dataset source: https://www.kaggle.com/code/kredy10/simple-lstm-for-text-classification
"""

from google.colab import files

files.upload()

import pandas as pd

df = pd.read_csv('/content/spam.csv', delimiter=',',encoding='latin-1')

df.head()

df.drop(['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'],axis=1,inplace=True)
df.columns = ['labels', 'text']
df.head()

category = pd.get_dummies(df.labels)
df_baru = pd.concat([df, category], axis=1)
df_baru = df_baru.drop(columns='labels')
df_baru

teks = df_baru['text'].values
label = df_baru[['ham', 'spam']].values

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(teks, label, test_size=0.2)

from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
 
tokenizer = Tokenizer(num_words=5000, oov_token='x')
tokenizer.fit_on_texts(X_train) 
tokenizer.fit_on_texts(X_test)
 
sekuens_latih = tokenizer.texts_to_sequences(X_train)
sekuens_test = tokenizer.texts_to_sequences(X_test)
 
padded_latih = pad_sequences(sekuens_latih) 
padded_test = pad_sequences(sekuens_test)

print(padded_test)

import tensorflow as tf
model = tf.keras.Sequential([
    tf.keras.layers.Embedding(input_dim=5000, output_dim=16),
    tf.keras.layers.LSTM(64),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(2, activation='softmax')
])

model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])

from keras.callbacks import EarlyStopping

es = EarlyStopping(
    monitor='val_loss',
    min_delta=0.0001,
    patience=3,
    verbose=1,
    mode='auto'
)

num_epochs = 30
history = model.fit(
    padded_latih, 
    Y_train, 
    epochs=num_epochs, 
    validation_data=(padded_test, Y_test), 
    callbacks = es,
    verbose=1)

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'validation'], loc='lower right')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'validation'], loc='upper right')
plt.show()

evaluate_test = model.evaluate(padded_test, Y_test, verbose=1)

print("\nAccuracy  =", "{:.5f}%".format(evaluate_test[1]*100))
print("Loss      =" ,"{:.7f}".format(evaluate_test[0]))