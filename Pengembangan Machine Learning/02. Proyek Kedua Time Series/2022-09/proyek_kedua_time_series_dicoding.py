# -*- coding: utf-8 -*-
"""Proyek Kedua Time Series Dicoding.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xXVzqm86L7C9Yar17Bm_dd3d5Q7VcvRr

Dataset Source: https://www.kaggle.com/datasets/fvcoppen/solarpanelspower
"""

from google.colab import files

files.upload()

import pandas as pd

df = pd.read_csv("/content/PV_Elec_Gas3.csv", sep=",", header=0)
df.drop(['Cumulative_solar_power', 'Gas/day'],axis=1,inplace=True)
df.columns = ['date', 'usage']
df

import matplotlib.pyplot as plt

dates = df['date'].values
usage  = df['usage'].values

plt.figure(figsize=(15,5))
plt.plot(dates, usage)

from sklearn.preprocessing import MinMaxScaler
min_max_scaler = MinMaxScaler()

reshape_usage = usage.reshape(1,-1)
usages = min_max_scaler.fit_transform(reshape_usage.T).flatten()

threshold_mae = (usages.max() - usages.min()) * 10/100
threshold_mae

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(usages, dates, test_size=0.2, shuffle=False)

import tensorflow as tf

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(X_train, window_size=60, batch_size=100, shuffle_buffer=1000)
test_set = windowed_dataset(X_test, window_size=60, batch_size=100, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(16, return_sequences=True),
  tf.keras.layers.LSTM(16),
  tf.keras.layers.Dense(16, activation="relu"),
  tf.keras.layers.Dense(8, activation="relu"),
  tf.keras.layers.Dense(4, activation="relu"),
  tf.keras.layers.Dense(1),
])

model.compile(loss=tf.keras.losses.Huber(),
              optimizer=tf.keras.optimizers.Adam(learning_rate=1.0000e-04),
              metrics=["mae"])

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')<threshold_mae):
      print("\nProses Pelatihan Sudah Selesai!")
      self.model.stop_training = True
callbacks = myCallback()

history = model.fit(
    train_set,
    epochs=100,
    callbacks=callbacks,
    verbose=1)

import matplotlib.pyplot as plt

plt.plot(history.history['loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.show()

plt.plot(history.history['mae'])
plt.title('mean absolute error')
plt.ylabel('mae')
plt.xlabel('epoch')
plt.show()